cmake_minimum_required(VERSION 3.15)

set(CMAKE_CXX_STANDARD 17)
option(CMAKE_BUILD_TYPE "Sets the build type" RelWithDebInfo)

# add_compile_definitions(NCEINFERENCE_INTEG=1)
if(STANDALONE_BUILD)
    if(CODE_COVERAGE)
        set(CMAKE_CXX_FLAGS "-fprofile-arcs -ftest-coverage -fPIC -O0")
        set(CMAKE_EXE_LINKER_FLAGS "-fprofile-arcs -ftest-coverage")
    endif()

    project(vpux_emulator LANGUAGES CXX)

    add_compile_definitions(STANDALONE_BUILD=${STANDALONE_BUILD})
    message("STANDALONE_BUILD = ${STANDALONE_BUILD}")

    # Set version and create version.h file
    set(VERSION_MAJOR "0")
    set(VERSION_MINOR "2")
    set(VERSION_PATCH "1")
    list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/)
    include(set_build_number)
    set_build_number()

    include(FetchContent)

    if(NOT MV_TOOLS_PATH)
        file(READ "${CMAKE_CURRENT_LIST_DIR}/movisim/stable_version.txt" TOOLS_VERSION)
        string(STRIP "${TOOLS_VERSION}" TOOLS_VERSION)
        FetchContent_Declare(
            ${TOOLS_VERSION}
            URL https://af01p-ir.devtools.intel.com/artifactory/mvt-package-ir-local/moviTools/${TOOLS_VERSION}/moviTools_${TOOLS_VERSION}.tar.gz
            SOURCE_DIR "${TOOLS_VERSION}"
        )
        FetchContent_MakeAvailable(${TOOLS_VERSION})
        set(MV_TOOLS_PATH ${CMAKE_CURRENT_BINARY_DIR}/${TOOLS_VERSION})
        message("MV_TOOLS_PATH = ${MV_TOOLS_PATH}")
    endif()

    set(OUTPUT_ROOT ${CMAKE_CURRENT_BINARY_DIR})
    set(META_DIR_PATH ${CMAKE_CURRENT_BINARY_DIR}/_deps/graphfile-schema-build)

    FetchContent_GetProperties(graphfile-schema)

    if(NOT graphfile-schema_POPULATED)
        FetchContent_Declare(
            graphfile-schema
            URL https://af01p-ir.devtools.intel.com/artifactory/mvt-generic-devel-local/graphfile/master/graphfile-schema_3.34.0.20220727.133449_60476d3.tar.gz
            SOURCE_DIR "${META_DIR_PATH}/include/schema/graphfile"
        )
        FetchContent_MakeAvailable(graphfile-schema)
    endif()

    if(NOT TARGET flatbuffers)
        FetchContent_Declare(flatbuffers
            GIT_REPOSITORY https://github.com/google/flatbuffers.git
            GIT_TAG "v2.0.0"
        )
        FetchContent_MakeAvailable(Flatbuffers)
    endif()

    set(graphfile_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/flatbuffers-src/include)
    set(Flatbuffers_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/flatbuffers-src/CMake)
else()
    set(graphfile_DIR ${CMAKE_CURRENT_BINARY_DIR}/../../../thirdparty/flatbuffers/include)
    set(META_DIR_PATH ${CMAKE_CURRENT_BINARY_DIR}/../../src/mcmCompiler/meta)
endif()

if(NOT TARGET fmt::fmt-header-only)
    FetchContent_Declare(fmt
        GIT_REPOSITORY https://github.com/fmtlib/fmt.git
        GIT_TAG 8.1.1
    )
    FetchContent_MakeAvailable(fmt)
endif()

if(NOT dpu_lite_POPULATED)
    FetchContent_Declare(
        dpu_lite
        URL URL https://af01p-ir.devtools.intel.com/artifactory/mvt-releases-local/vpu2p7_nceInferenceLinux/2022-10-28_vpu_sysc_v0p0_y22ww44_0391/vpu2p7_nceInferenceLinux_2022-10-28_vpu_sysc_v0p0_y22ww44_0391.tar.gz
        SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR}/external/vpux37xx/dpu_lite
    )
    FetchContent_MakeAvailable(dpu_lite)
endif()

set(EMU_LIBRARY vpux_emulator)
set(EMU_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR})
set(EMU_EXTERNAL_DIR ${EMU_ROOT_DIR}/external)
set(EMU_INCLUDE_DIR ${EMU_ROOT_DIR}/include)
set(EMU_SOURCE_DIR ${EMU_ROOT_DIR}/src)
set(DPU_LITE_DIR ${EMU_EXTERNAL_DIR}/vpux37xx/dpu_lite)
set(DPU_LITE_INCLUDE_DIR ${DPU_LITE_DIR}/include)
set(DPU_LITE_LIB ${DPU_LITE_DIR}/lib/nceInferenceDebug64.a)

set(
    EMU_EXTERNAL_SOURCES
    ${EMU_EXTERNAL_DIR}/vpux30xx/vpux30xx_fp16.cpp
    ${EMU_EXTERNAL_DIR}/vpux30xx/vpux30xx_moviFloat32.cpp
    ${EMU_EXTERNAL_DIR}/shared_library.cpp
    ${EMU_EXTERNAL_DIR}/commonData.cpp)
set(
    EMU_CORE_SOURCES
    ${EMU_SOURCE_DIR}/arithmetic_types.cpp
    ${EMU_SOURCE_DIR}/architecture.cpp
    ${EMU_SOURCE_DIR}/configuration.cpp
    ${EMU_SOURCE_DIR}/emulation_type.cpp
    ${EMU_SOURCE_DIR}/layer_type.cpp
    ${EMU_SOURCE_DIR}/manager.cpp
    ${EMU_SOURCE_DIR}/manager_Impl.cpp
    ${EMU_SOURCE_DIR}/tensor_manager.cpp)
set(
    EMU_RUNNER_SOURCES
    ${EMU_SOURCE_DIR}/runner/manager.cpp
    ${EMU_SOURCE_DIR}/runner/instance/procedure/accumulate.cpp
    ${EMU_SOURCE_DIR}/runner/instance/procedure/post_process.cpp
    ${EMU_SOURCE_DIR}/runner/movisim/binding.cpp
    ${EMU_SOURCE_DIR}/runner/movisim/simulator.cpp
    ${EMU_SOURCE_DIR}/runner/movisim/tensor_reference.cpp
    ${EMU_SOURCE_DIR}/runner/movisim/upa_task_simulator.cpp
    ${EMU_SOURCE_DIR}/runner/movisim/vp_logger.cpp
    ${EMU_SOURCE_DIR}/runner/config/parsing.cpp)
set(
    EMU_TENSOR_SOURCES
    ${EMU_SOURCE_DIR}/tensor/order.cpp)
set(
    EMU_UTILS_SOURCES
    ${EMU_SOURCE_DIR}/utils/assert.cpp
    ${EMU_SOURCE_DIR}/utils/op.cpp)

if(STANDALONE_BUILD)
    add_library(
        ${EMU_LIBRARY}
        SHARED
        ${DPU_LITE_INCLUDE_DIR}
        ${EMU_EXTERNAL_SOURCES}
        ${EMU_CORE_SOURCES}
        ${EMU_RUNNER_SOURCES}
        ${EMU_TENSOR_SOURCES}
        ${EMU_UTILS_SOURCES})

    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        if(CODE_COVERAGE)
            target_compile_options(${PROJECT_NAME} PRIVATE "-ftest-coverage")
            target_compile_options(${PROJECT_NAME} PRIVATE "-fprofile-arcs")
            target_compile_options(${PROJECT_NAME} PRIVATE "-g")
            set(CMAKE_SHARED_LINKER_FLAGS "--coverage")
        endif()
    endif()
else()
    add_library(
        ${EMU_LIBRARY}
        SHARED
        ${DPU_LITE_INCLUDE_DIR}
        ${EMU_EXTERNAL_SOURCES}
        ${EMU_CORE_SOURCES}
        ${EMU_RUNNER_SOURCES}
        ${EMU_TENSOR_SOURCES}
        ${EMU_UTILS_SOURCES})
endif()

target_compile_definitions(
    ${EMU_LIBRARY}
    PUBLIC
    EMU_TENSOR_DIMENSIONS=5
    MV_TOOLS_PATH="${MV_TOOLS_PATH}"
    NCEINFERENCE_INTEG=1)

target_compile_options(
    ${EMU_LIBRARY}
    PRIVATE
    -Wall
    -Wcast-align
    -Wcast-qual
    -Werror
    -Wextra
    -Wmissing-declarations
    -Wmissing-include-dirs
    -Wpedantic
    -Wpointer-arith
    -Wredundant-decls
    -Wshadow
    -Wundef)

# TODO: -Wlogical-op
target_include_directories(
    ${EMU_LIBRARY}
    PUBLIC
    ${EMU_ROOT_DIR}
    ${EMU_INCLUDE_DIR}
    ${graphfile_DIR}
    $<BUILD_INTERFACE:${META_DIR_PATH}>
    $<BUILD_INTERFACE:${META_DIR_PATH}/include>
    PRIVATE
    ${EMU_INCLUDE_DIR}/emu
    ${EMU_SOURCE_DIR}
    ${MV_TOOLS_PATH}/common/moviSim/includes)

if(CODE_COVERAGE)
    target_link_libraries(${EMU_LIBRARY} PRIVATE gcov)
endif()

target_link_libraries(${EMU_LIBRARY} PUBLIC flatbuffers)
target_link_libraries(${EMU_LIBRARY} PUBLIC dl pthread)
target_link_libraries(${EMU_LIBRARY} PUBLIC fmt::fmt-header-only)
target_link_libraries(${EMU_LIBRARY} PUBLIC ${DPU_LITE_LIB})


if(STANDALONE_BUILD)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/bin/intel64/$<CONFIG>/lib")
endif()

add_custom_target(upa_task_simulator_copy ALL
    COMMAND ${CMAKE_COMMAND} -E make_directory
        "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/vpux_emulator"
    COMMAND ${CMAKE_COMMAND} -E copy
        "${EMU_ROOT_DIR}/movisim/upa_task_simulator.elf"
        "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/vpux_emulator"
    COMMAND ${CMAKE_COMMAND} -E copy
        "${EMU_ROOT_DIR}/config/config.json"
        "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CMAKE_CFG_INTDIR}/vpux_emulator"
    COMMENT "[mcm simulator] Copy upa_task_simulator"
)

if(STANDALONE_BUILD)
    if(RUN_TESTS)
        add_subdirectory("tests")
    endif()
endif()
