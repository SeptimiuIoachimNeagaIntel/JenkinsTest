@Library('ToolsPipelineLib') _


pipeline {
    stages {
        stage('Get version') {
            steps {
                container('jnlp') {
                    dir ("${env.WORKSPACE}") {
                        sh "ls -lrta ."
                        sh "sed -n -e 's/^.*project\\(.*\\)/\\1/p' vpux_emulator/CMakeLists.txt"
                        sh "sed -n -e 's/^.*project(vpux_emulator.*VERSION *\\(.*\\))/\\1/p' vpux_emulator/CMakeLists.txt"
                        script {
                            def VERSION_MAJOR = sh (
                                script: "sed -n -e 's/^.*VERSION_MAJOR \\\"\\(.*\\)\\\".*/\\1/p' vpux_emulator/CMakeLists2.txt",
                                returnStdout: true).trim()
                            def VERSION_MINOR = sh (
                                script: "sed -n -e 's/^.*VERSION_MINOR \\\"\\(.*\\)\\\".*/\\1/p' vpux_emulator/CMakeLists2.txt",
                                returnStdout: true).trim()
                            def VERSION_PATCH = sh (
                                script: "sed -n -e 's/^.*VERSION_PATCH \\\"\\(.*\\)\\\".*/\\1/p' vpux_emulator/CMakeLists2.txt",
                                returnStdout: true).trim()
                            env.BUILD_VERSION = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
                            env.BUILD_NUMBER   = sh (
                                        script: "date +'%Y%m%d.%H%M%S'_\${GIT_COMMIT:0:8}",
                                        returnStdout: true).trim()
                        }
                        sh "echo BUILD_VERSION = ${env.BUILD_VERSION};"
                    }
                }
            }
        }
    }
}
