
@Library('ToolsPipelineLib') _


pipeline {
    agent {
        kubernetes (
            cloud: 'kubi-linux',
            inheritFrom: 'default',
            containerTemplates: [
                containerTemplate(
                    name: 'openvino',
                    image: 'ger-registry.caas.intel.com/movitools/nntools:openvino_1.8',
                    command: 'cat',
                    resourceRequestCpu: '8',
                    resourceLimitCpu: '8',
                    resourceLimitMemory: '32Gi',
                    ttyEnabled: true
                ),
                containerTemplate(
                    name: 'gcov',
                    image: 'ger-registry.caas.intel.com/movitools/nntools:gcov_1.2',
                    command: 'cat',
                    resourceRequestCpu: '0',
                    resourceLimitCpu: '4',
                    resourceLimitMemory: '1Gi',
                    ttyEnabled: true
                ),
                containerTemplate(
                    name: 'testdistro',
                    image: 'ger-registry.caas.intel.com/movitools/testdistro:ubuntu20.04_10',
                    command: 'cat',
                    resourceRequestCpu: '0',
                    resourceLimitCpu: '4',
                    resourceLimitMemory: '1Gi',
                    ttyEnabled: true
                ),
            ]
        )
    }
    triggers {
        githubPullRequests( abortRunning: true,
                    cancelQueued: true,
                    events: [commitChanged(), Open()],
                    preStatus: true,
                    repoProviders: [githubPlugin(cacheConnection: false, manageHooks: false, repoPermission: 'PUSH')],
                    spec: 'H/30 * * * *',
                    triggerMode: 'HEAVY_HOOKS_CRON')
        githubBranches( abortRunning: true,
                            cancelQueued: true,
                            events:[hashChanged(), commit(), branchCreated()],
                            preStatus: true,
                            repoProviders: [githubPlugin(cacheConnection: false, manageHooks: false, repoPermission: 'PUSH')],
                            spec: 'H/30 * * * *',
                            triggerMode: 'HEAVY_HOOKS_CRON')
    }
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '14', numToKeepStr: '14')
        disableConcurrentBuilds()
        timeout(time: 12, unit: 'HOURS')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        copyArtifactPermission('*')
        //githubProjectProperty('https://github.com/intel-innersource/applications.ai.vpu-accelerators.vpux-emulator/')
    }
    environment {
        PROJECT_NAME = "vpux-plugin"
        ARTIFACT = "${env.PROJECT_NAME}"
        AF_TOKEN = credentials("CID-sys_mtbuild-af01p_ir-key_text")
        PYTHONUNBUFFERED = 1
        ARTIFACTORY_URL = "https://af01p-ir.devtools.intel.com/artifactory"
        ARTIFACTORY_KEY = credentials("CID-sys_mtbuild-af01p_ir-key_text")
        JFROG_CLI_OFFER_CONFIG = false
        JFROG_DL_ARGS = "--sort-by=created --sort-order=desc --limit=1 --explode --flat"
        GIT_LFS_SKIP_SMUDGE=1
        GIT_TRACE=1
    }
    stages {
        stage('Checkout vpux-emulator') {
            options { skipDefaultCheckout() }
            environment{
                GIT_LFS_SKIP_SMUDGE=1
                GIT_TRACE=1
            }
            steps {
                container('jnlp'){
                    dir("${env.WORKSPACE}") {
                                        sh "printenv | sort"
                          sh """ git config filter.lfs.process = "git-lfs filter-process --skip" """
                        //sh "git config --global --unset url.ssh://git@gitcache.ti.intel.com:2221/.insteadOf ssh://git@github.com/"
                        //sh "git config --global --unset url.ssh://git@lfscache.ti.intel.com:2222/af01p-ir.devtools.intel.com_1339/artifactory/.insteadOf ssh://git@af01p-ir.devtools.intel.com:1339/artifactory/"
                        //sh "git config --global --list"
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${env.BRANCH_NAME}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'RelativeTargetDirectory', relativeTargetDir: "${env.WORKSPACE}/vpux_emulator"],
                                [$class: 'CheckoutOption', timeout: 30],
                                [$class: 'CloneOption', honorRefspec: true, noTags: "false", reference: "", shallow: false, timeout: 30],
                                [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, trackingSubmodules: false, timeout: 30 ],
                                [$class: 'GitLFSPull']
                                ],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                // credentialsId: 'CID-1Source-Pass_SSH',
                                credentialsId: 'CID-1Source-SSH-Test',
                                url: "ssh://git@github.com/intel-innersource/applications.ai.vpu-accelerators.vpux-emulator.git"
                            ]]
                        ])
                // 		sh "GIT_TRACE=1 git lfs pull"
                    }
                }
            }
        }
        stage('Get version') {
            options { skipDefaultCheckout() }
            steps {
                container('jnlp') {
                    dir ("${env.WORKSPACE}") {
                        sh "ls -lrta ."
                        sh "cat vpux_emulator/CMakeLists.txt"
                        sh "sed -n -e 's/^.*project\\(.*\\)/\\1/p' vpux_emulator/CMakeLists.txt"
                        script {
                                def BUILD_VERSION = sh (
                                    script: "sed -n -e 's/^.*project(vpux_emulator.*VERSION *\\(.*\\))/\\1/p' vpux_emulator/CMakeLists.txt",
                                    returnStdout: true).trim()
                                def BUILD_VERSION2 = sh (
                                    script: "sed -n -e 's/^.*project\\(.*\\)/\\1/p' vpux_emulator/CMakeLists.txt",
                                    returnStdout: true).trim()
                                env.BUILD_NUMBER   = sh (
                                            script: "date +'%Y%m%d.%H%M%S'_\${GIT_COMMIT:0:8}",
                                            returnStdout: true).trim()
                        }
                        sh "ls -lrta ."
                        sh "echo BUILD_VERSION = ${env.BUILD_VERSION};"
                        sh "echo BUILD_VERSION2 = ${env.BUILD_VERSION2};"
                    }
                }

            }
        }
        stage('Copy vpux-plugin from Storage') {
            steps {
                container('jnlp') {
                    dir("${env.WORKSPACE}") {
                        mstoreGet("vpux-plugin", "vpux-plugin")
                    }
                }
            }
        }
        stage('Download tools from Storage') {
            steps {
                container('testdistro') {
                    dir("${env.WORKSPACE}") {
                        script {
                            env.MV_TOOLS_DIR = sh (
                                    script: "head -1 ${env.WORKSPACE}/vpux_emulator/movisim/stable_version.txt",
                                    returnStdout: true).trim()

                        }
                        //sh """
                        // 	echo ${env.MV_TOOLS_DIR}
                        //
                        //	jfrog rt dl \"mvt-package-ir-local/moviTools/${env.MV_TOOLS_DIR}/\" \"${env.WORKSPACE}/\" ${env.JFROG_DL_ARGS} \
                        //			--url ${env.ARTIFACTORY_URL} --apikey ${env.ARTIFACTORY_KEY}
                        //
                        //"""
                        mstoreGet("${env.MV_TOOLS_DIR}", "${env.MV_TOOLS_DIR}")
                    }
                }
            }
        }
        stage('Build vpux-emulator') {
            steps {
                container('openvino') {
                    dir("${env.WORKSPACE}") {
                        sh """
                            cd vpux_emulator
                            ls -la
                            cmake -Bbuild -DMV_TOOLS_PATH=${env.WORKSPACE}/${env.MV_TOOLS_DIR} -DCMAKE_BUILD_TYPE=Release -DSTANDALONE_BUILD=ON -DRUN_TESTS=ON .
                            cd build
                            make -j8
                            ls -la .
                          """
                    }
                    stash(
                            name: "vpux_emu_linux",
                            includes: "vpux_emulator/build/libvpux_emulator.so"
                    )
                }
            }
        }
        stage('Deploy') {
            options { skipDefaultCheckout() }
            environment {
                PACKAGE_DIR = "Package"
                ARCHIVE     = "vpux_emulator_${env.BUILD_VERSION}.${env.BUILD_NUMBER}.tar.gz"
            }
            steps {
                container('jnlp') {
                    sh "rm -rf ${env.PACKAGE_DIR}*"

                    dir ("${env.WORKSPACE}/${env.PACKAGE_DIR}") {
                        unstash "vpux_emu_linux"

                        sh "tar -czvf ${env.ARCHIVE} *"
                        sh "rm -rf libvpux_emulator.a"
                        sh "ls -l ."
                    }
                    //artifactoryPush "vpux_emulator", "${env.PACKAGE_DIR}/${env.ARCHIVE}"
                }
            }
            post {
                success {
                    archiveArtifacts "${env.PACKAGE_DIR}/**/*"
                }
            }
        }
        stage('Build for code coverage') {
            steps {
                container('openvino') {
                    dir("${env.WORKSPACE}") {
                        sh """
                            cd vpux_emulator
                            ls -la
                            cmake -Bbuild -DMV_TOOLS_PATH=${env.WORKSPACE}/${env.MV_TOOLS_DIR} -DOPENVINO_HOME=/openvino -DCMAKE_BUILD_TYPE=Release -DSTANDALONE_BUILD=ON -DRUN_TESTS=ON -DCODE_COVERAGE=ON .
                            cd build
                            make -j8
                            ls -la .
                          """
                    }
                }
            }
        }
        stage('Build gcovr report') {
             environment {
                REPORTS_DIR = "Reports"
                HOME='/tmp'
            }
            steps {
                container('gcov') {
                    dir("${env.REPORTS_DIR}") {
                        sh "find . -delete"
                    }

                    dir("${env.WORKSPACE}") {
                        sh """
                        pip install markupsafe==2.0.1
                        gcovr -r vpux_emulator/ --exclude vpux_emulator/build/_deps/
                        lcov --capture --directory vpux_emulator/ --exclude vpux_emulator/build/_deps/ --output-file ${env.REPORTS_DIR}/coverage.info --no-external
                        lcov --remove ${env.REPORTS_DIR}/coverage.info -o ${env.REPORTS_DIR}/coverage_filtered.info '*/fmt*' '*/flatbuffers*' '*/googletest*'
                        genhtml ${env.REPORTS_DIR}/coverage_filtered.info --output-directory ${env.REPORTS_DIR}
                        """
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                        reportDir: "${env.REPORTS_DIR}/", reportFiles: 'index.html',
                        reportName: 'GCovr Report', reportTitles: ''])
                    }
                }
            }
        }
    }
      post {
        success {
            updatePipelineStatus("Main Pipeline - vpux-emu", "success")
        }
        failure {
            updatePipelineStatus("Main Pipeline - vpux-emu", "failed")
        }
        aborted {
            updatePipelineStatus("Main Pipeline - vpux-emu", "canceled")
        }
    }
}
