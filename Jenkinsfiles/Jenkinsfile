@Library('ToolsPipelineLib') _


pipeline {
    agent {
        kubernetes (
            cloud: 'kubi-linux',
            inheritFrom: 'default',
            containerTemplates: [
                containerTemplate(
                    name: 'openvino',
                    image: 'ger-registry.caas.intel.com/movitools/nntools:openvino_1.8',
                    command: 'cat',
                    resourceRequestCpu: '8',
                    resourceLimitCpu: '8',
                    resourceLimitMemory: '32Gi',
                    ttyEnabled: true
                ),
                containerTemplate(
                    name: 'buildtools',
                    image: 'ger-registry.caas.intel.com/movitools/buildtools:5.2_centos7',
                    command: 'cat',
                    resourceLimitCpu: '2',
                    resourceRequestMemory: '1Gi',
                    resourceLimitMemory: '4Gi',
                    ttyEnabled: true
                ),
            ]
        )
    }
    environment {
        AF_TOKEN = credentials("CID-sys_mtbuild-af01p_ir-key_text")
        PYTHONUNBUFFERED = 1
        ARTIFACTORY_URL = "https://af01p-ir.devtools.intel.com/artifactory"
        ARTIFACTORY_KEY = credentials("CID-sys_mtbuild-af01p_ir-key_text")
        JFROG_CLI_OFFER_CONFIG = false
    }
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '14', numToKeepStr: '14')
        disableConcurrentBuilds()
        timeout(time: 12, unit: 'HOURS')
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        copyArtifactPermission('*')
        checkoutToSubdirectory('ProjectFiles')
    }
    stages {
        stage('Get module') {
            failFast false
            parallel {
                stage('Get module buildtools') {
                    environment {
                        SSH_PRIVATE_KEY_FILE=credentials("CID-1Source-SSH-Test")
                        GIT_SSH_COMMAND="ssh -i ${env.SSH_PRIVATE_KEY_FILE}"
                    }
                    steps {
                        container('buildtools') {
                            sh "ls -lrta"
                            sh "cat ${env.SSH_PRIVATE_KEY_FILE}"
                            sh "which ssh"
                            sh "which git"
                            sh "ssh"
                            sh "git clone --help"
                            sh "git --version"
                            sh 'git clone git@github.com:SeptimiuIoachimNeagaIntel/JenkinsTest.git'
                            sh "ls -lrta"
                            sh "cmake -B build ProjectFiles"
                            sh "ls -lrta"
                        }
                    }
                }
                stage('Get module jnlp') {
                    environment {
                        SSH_PRIVATE_KEY_FILE=credentials("CID-1Source-SSH-Test")
                        GIT_SSH_COMMAND="ssh -i ${env.SSH_PRIVATE_KEY_FILE}"
                    }
                    steps {
                        container('jnlp') {
                            sh "ls -lrta"
                            sh "cat ${env.SSH_PRIVATE_KEY_FILE}"
                            sh "which ssh"
                            sh "which git"
                            sh "ssh"
                            sh "git clone --help"
                            sh "git --version"
                            sh 'git clone git@github.com:SeptimiuIoachimNeagaIntel/JenkinsTest.git'
                            sh "ls -lrta"
                            sh "cmake -B build ProjectFiles"
                            sh "ls -lrta"
                        }
                    }
                }
            }
        }
    }
}
